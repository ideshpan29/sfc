<?xml version="1.0" encoding="UTF-8"?>
<!--Created by TIBCO WSDL-->
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://www.tibco.com/bx/2009/management/process/BxProcessManagementService_1.10.0" xmlns:ns0="http://www.tibco.com/bx/2009/management/processManagerType" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" name="BxProcessManagementService_1.10.0" targetNamespace="http://www.tibco.com/bx/2009/management/process/BxProcessManagementService_1.10.0">
    <wsdl:types>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pm="http://www.tibco.com/bx/2009/management/processManagerType" targetNamespace="http://www.tibco.com/bx/2009/management/processManagerType" elementFormDefault="qualified" attributeFormDefault="unqualified">
            <xsd:complexType name="ActivityInstanceStatus">
                <xsd:annotation>
                    <xsd:documentation>Type to summarize the current status of an instance of an activity in a process.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="activityID" nillable="true" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
						Unique ID assigned to the activity, for example
						XPDL ID assigned by BusinessStudio's BPMN
						Process Editor.
					</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="activityName" nillable="true" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
						Optional name of the activity
					</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="activityState" nillable="true" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
						Current state of an activity instance, for
						example WAITING
					</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="startTime" nillable="true" type="xsd:dateTime">
                        <xsd:annotation>
                            <xsd:documentation>
						When the activity instance starts execution
					</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="completionTime" nillable="true" type="xsd:dateTime">
                        <xsd:annotation>
                            <xsd:documentation>
						When the activity instance finishes execution
					</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="deadlineExpirationTime" nillable="true" type="xsd:dateTime">
                        <xsd:annotation>
                            <xsd:documentation>
						A timer intermediate event can be attached to
						any activity. This field keeps track of when
						time-out would occur if the activity did not
						complete.
					</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="retries" type="xsd:int"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="AdhocActivityType">
                <xsd:sequence minOccurs="0">
                    <xsd:element name="processID" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="description" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="enabled" type="xsd:boolean" minOccurs="0"/>
                    <xsd:element name="inProgress" type="xsd:boolean" minOccurs="0"/>
                    <xsd:element name="repeatable" type="xsd:boolean" minOccurs="0"/>
                    <xsd:element name="automatic" type="xsd:boolean" minOccurs="0"/>
                    <xsd:element name="completedCount" type="xsd:integer" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="name" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of the Adhoc activity</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="AdhocActivityTypes">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="activity" type="pm:AdhocActivityType">
                        <xsd:annotation>
                            <xsd:documentation>application set containing the process templates.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ApplicationTemplate">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="processTemplates" type="pm:ProcessTemplatesType" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="name" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of the application which contains the following process templates.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="ApplicationTemplates">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="application" type="pm:ApplicationTemplate">
                        <xsd:annotation>
                            <xsd:documentation>application set containing the process templates.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="Applications">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="applicationName" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) specified the applications to query.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:simpleType name="AttributeType">
                <xsd:annotation>
                    <xsd:documentation>Enumeration values used to tag process template attributes and process instance attributes into different categories. 

(Do not delete or re-position any of the enumeration values. If a value must be removed, simply replace it with a "dummy" value.)</xsd:documentation>
                </xsd:annotation>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="FILTERABLE"/>
                    <xsd:enumeration value="SORTABLE"/>
                    <xsd:enumeration value="DISPLAYABLE"/>
                    <xsd:enumeration value="HALT_ONLY"/>
                </xsd:restriction>
            </xsd:simpleType>
            <xsd:complexType name="BasicFaultType">
                <xsd:annotation>
                    <xsd:documentation>Type for all fault elements.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="reason" nillable="true" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reason for the exception.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="BasicProcessTemplate">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a process template.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="processQName" type="pm:QualifiedProcessName">
                        <xsd:annotation>
                            <xsd:documentation>Fully qualified name of the process template.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="description" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Description of the process template.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="CreateProcessInstanceOptions">
                <xsd:annotation>
                    <xsd:documentation>Provides options to control how a purge is carried out</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="priority" type="xsd:short" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) Priority value used to schedule the execution of this process instance</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="DatabaseIdType">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="databaseId" type="xsd:long"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ExtendedPage">
                <xsd:complexContent>
                    <xsd:extension base="pm:Page">
                        <xsd:sequence>
                            <xsd:element name="totalCount" type="xsd:int" minOccurs="0">
                                <xsd:annotation>
                                    <xsd:documentation>total number of items returned from the query.</xsd:documentation>
                                </xsd:annotation>
                            </xsd:element>
                            <xsd:element name="pageNumber" type="xsd:int" minOccurs="0">
                                <xsd:annotation>
                                    <xsd:documentation>page number.</xsd:documentation>
                                </xsd:annotation>
                            </xsd:element>
                            <xsd:element name="isLastPage" type="xsd:boolean" minOccurs="0">
                                <xsd:annotation>
                                    <xsd:documentation>is last page indicator.</xsd:documentation>
                                </xsd:annotation>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:extension>
                </xsd:complexContent>
            </xsd:complexType>
            <xsd:complexType name="GeneralStatusType">
                <xsd:annotation>
                    <xsd:documentation>The status of a purge operation</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="statusMessage" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>A message indicating further information on the last purge operation</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="start" type="xsd:dateTime" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>The time the purge operation started</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="end" type="xsd:dateTime" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>The time the purge operation ended</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="details" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Any additional details for this purge</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="count" type="xsd:long" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>The current number of instances executed</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="operationName" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>The name of the  operation being referred to</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="status" type="pm:StatusCode"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="InstanceAttribute">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a process instance attribute.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexContent>
                    <xsd:extension base="pm:NameTypePair">
                        <xsd:sequence>
                            <xsd:element name="processQName" type="pm:QualifiedProcessName">
                                <xsd:annotation>
                                    <xsd:documentation>Fully qualified name of the parent process template.</xsd:documentation>
                                </xsd:annotation>
                            </xsd:element>
                            <xsd:element name="viewtype" nillable="true" type="xsd:string">
                                <xsd:annotation>
                                    <xsd:documentation>View type of the attribute, as a combination of the values FILTERABLE (1), SORTABLE (2), DISPLAYABLE (3) and HALT_ONLY (4)

For example, the value "23" indicates that the attribute is SORTABLE and DISPLAYABLE, but not FILTERABLE.</xsd:documentation>
                                </xsd:annotation>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:extension>
                </xsd:complexContent>
            </xsd:complexType>
            <xsd:complexType name="MigrationPointModuleType">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of migration points for a module/version set.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="process" type="pm:MigrationPointProcessType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>List of migration points for this module and version.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="name" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of module.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="version" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Version number of module.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="MigrationPointProcessType">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of migration points for a process template.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="task" type="pm:MigrationPointTaskType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>List of migration points for this process template.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="name" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of process template.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="MigrationPointTaskType">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a task that is a valid migration point.</xsd:documentation>
                </xsd:annotation>
                <xsd:attribute name="name" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of a task that is a valid migration point for this process template.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="MigrationPointTypes">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of migration points. Each migration point consists of a unique set of module name, module version, process template name and task name.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="module" type="pm:MigrationPointModuleType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>List of migration points.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="MigrationRuleModuleType">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of migration rules for: a module, and the module version from which migration is to take place.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="process" type="pm:MigrationRuleProcessType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>List of migration rules for this module and version.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="name" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of the module from which migration is to take place.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="version" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Version number of the module from which migration is to take place.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="MigrationRuleModuleTypeList">
                <xsd:annotation>
                    <xsd:documentation>Type to describe module-level migration rules.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="process" type="pm:MigrationRuleProcessTypeList" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>List of migration rules for this module/version set.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="name" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of the module from which migration is to take place.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="version" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Version number (of the module) from which migration is to take place.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="MigrationRuleProcessType">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of migration rules for a process template from which migration is to take place.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="migrate" type="pm:MigrationRuleTaskType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>List of migration rules for this process template.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="name" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of the process template from which migration is to take place.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="MigrationRuleProcessTypeList">
                <xsd:annotation>
                    <xsd:documentation>Type to describe process template-level migration rules.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="migrate" type="pm:MigrationRuleTaskTypeList" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>List of migration rules for this process template.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="name" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of the process template from which migration is to take place.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="MigrationRuleTaskType">
                <xsd:annotation>
                    <xsd:documentation>Type to describe the task from which migration is to take place, and the version number of the module to which the process instance should be migrated.</xsd:documentation>
                </xsd:annotation>
                <xsd:attribute name="description" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>(Optional) Explanation of this migration rule.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="fromTask" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of the task defining the point in the process from which the process instance should be migrated. (This task must be a valid migration point.)</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="toVersion" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Version number of the module (process template) to which the process instance should be migrated.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="MigrationRuleTaskTypeList">
                <xsd:annotation>
                    <xsd:documentation>Type to describe task-level migration rules.</xsd:documentation>
                </xsd:annotation>
                <xsd:attribute name="creationTime" use="required" type="xsd:dateTime">
                    <xsd:annotation>
                        <xsd:documentation>Date/time on which the rule was created.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="description" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>(Optional) Explanation of the migration rule.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="fromTask" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Name of the task from which migration is to take place.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="toVersion" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Version number (of the module) to which a process instance is to migrate.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:complexType>
            <xsd:complexType name="MigrationRuleTypes">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of migration rules. 

Each migration rule consists of a unique set of module name, module version from which to migrate, process template name, task name from which to migrate, and module version to which to migrate.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="module" type="pm:MigrationRuleModuleType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>List of migration rules.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="MigrationRuleTypesList">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of migration rules. Each migration rule consists of unique set of module name, module version from which to migrate, process template name, task name from which to migrate, and module version to which to migrate.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="module" type="pm:MigrationRuleModuleTypeList" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>List of migration rules.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="NameTypePair">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a name/type pair.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="name" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Name of the item.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="type" nillable="true" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Data type of the item.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="NameValuePair">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a name/value pair.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="name" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Name</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="value" nillable="true" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Value</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="OperationInfo">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a starter operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="operationName" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Name of the starter operation.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="parameters" nillable="true" type="pm:TemplateAttributes">
                        <xsd:annotation>
                            <xsd:documentation>List of parameters for this starter operation.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="Page">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a page of data.</xsd:documentation>
                </xsd:annotation>
                <xsd:choice>
                    <xsd:element name="processInstances" nillable="true" type="pm:ProcessInstances">
                        <xsd:annotation>
                            <xsd:documentation>
						List of process instances.
					</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="processTemplates" nillable="true" type="pm:ProcessTemplates">
                        <xsd:annotation>
                            <xsd:documentation>
						List of process templates.
					</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
            <xsd:complexType name="ProcessIdDBInfo">
                <xsd:annotation>
                    <xsd:documentation>Type to describe the PVM database information corresponding to a PVM ID.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="processId" nillable="true" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Process ID</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="objectSpace" nillable="true" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Identifies the space (PROCESS,TASK, ...) of the process ID.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="dbId" nillable="true" type="xsd:long">
                        <xsd:annotation>
                            <xsd:documentation>Identifies the database ID corresponding to the process ID.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ProcessInstance">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a process instance.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="processQName" type="pm:QualifiedProcessName" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Fully qualified name of the process template from which the process instance was created.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="id" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Unique ID assigned to the process instance.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="state" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Current state of the process instance - for example ACTIVE or SUSPENDED. For a complete list of the possible states and their meanings, see the Openspace User's Guide or Workspace User's Guide.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="startTime" nillable="true" type="xsd:dateTime" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Date/time when the process instance first became active.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="completionTime" nillable="true" type="xsd:dateTime" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Date/time the process instance reached one of the terminal states.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="priority" nillable="true" type="xsd:int" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Priority of the process instance, used to schedule its execution.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="waitingWorkCount" nillable="true" type="xsd:int" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Count of the number of user task instances waiting for a response from Business Resource Management (BRM).

This indirectly provides a count of the number of outstanding work items associated with the process instance.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="parentProcessID" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Unique ID of the parent process instance, in cases where the process instance was created via a sub-process call.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="userID" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>ID of the user who sent the request that results in the creation of the process instance. This ID is determined from the user/security-context.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="originatorName" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>username who sent the request that results in the creation of the process instance.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="failedActivityName" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Name of the failed activity.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="activityFaultName" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Activity fault name.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="activityFaultData" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Activity fault data.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="customAttributes" nillable="true" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>List of user-defined attributes.</xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="customAttribute" type="pm:NameValuePair" minOccurs="0" maxOccurs="unbounded">
                                    <xsd:annotation>
                                        <xsd:documentation>Attribute definitions.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ProcessInstances">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of process instances.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="processInstance" type="pm:ProcessInstance" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>Details of process instances.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ProcessInstancesType">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="processInstance" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ProcessTemplate">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a process template.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="basicTemplate" type="pm:BasicProcessTemplate">
                        <xsd:annotation>
                            <xsd:documentation>Basic/core attributes of this process template.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="state" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>State of the process template, for example ACTIVE.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="priority" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Default scheduling priority to be assigned to process instances created from this process template.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="creationTime" nillable="true" type="xsd:dateTime" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Date/time when this process template was created.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="willSave" nillable="true" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>flag to indicate whether terminated process instances should be saved</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="saveDuration" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>duration string to indicate how long the terminated process instances should be saved</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="serviceProcess" nillable="true" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>service process flag to indicate whether definition is a service process.  true for service process: false for business process</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ProcessTemplates">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of process templates.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="processTemplate" type="pm:ProcessTemplate" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>Details of process templates.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ProcessTemplatesType">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="processQName" type="pm:QualifiedProcessName"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="PurgeOptions">
                <xsd:annotation>
                    <xsd:documentation>Provides options to control how a purge is carried out</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="states" type="pm:TerminalStates" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) purge those process instances with specified state(s).  If no state(s) are specified, then process instances that are in a terminal state will be purged. </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="batchSize" type="xsd:int" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) Number of process instances that should be deleted before the transaction is committed.

Default value: 100</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="runInBackground" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) Boolean value specifying whether the purge runs in the background. If:
- True: The purge will run in the background and the operation returns immediately. This is the default value.
- False: The operation waits for the purge to complete before returning (subject to timeouts).</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="threshold" type="xsd:dateTime" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) Date before which process instances must have been completed, cancelled or failed for them to be purged in this operation.

If this value is omitted, all completed, cancelled and failed instances will be deleted.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="applications" type="pm:Applications" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) specified the applications for which all the process instances in the contained process templates are to be purged.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="processTemplates" type="pm:ProcessTemplatesType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) specified the tagged process templates for which the corresponding instances are to be purged.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="processInstances" type="pm:ProcessInstancesType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) specified the tagged process instances to be purged.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="PurgeStatus">
                <xsd:annotation>
                    <xsd:documentation>The status of a purge operation</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="statusMessage" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>A message indicating further information on the last purge operation</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="start" type="xsd:dateTime" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>The time the purge operation started</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="end" type="xsd:dateTime" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>The time the purge operation ended</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="details" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Any additional details for this purge</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="currentInstanceCount" type="xsd:long" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>The current number of instances purged</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="totalInstanceCount" type="xsd:long" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>The total number of instances matched for this purge</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="purgeOperationName" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>The name of the purge operation being referred to</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="status" type="pm:PurgeStatusType"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:simpleType name="PurgeStatusType">
                <xsd:annotation>
                    <xsd:documentation>An enumerated status indicator for the last purge operation</xsd:documentation>
                </xsd:annotation>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="PURGE_IN_PROGRESS">
                        <xsd:annotation>
                            <xsd:documentation>A purge action is currently being executed</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="PURGE_COMPLETED">
                        <xsd:annotation>
                            <xsd:documentation>The last purge operation completed successfully</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="PURGE_STOPPED">
                        <xsd:annotation>
                            <xsd:documentation>The last purge operation was stopped manually</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="PURGE_FAILED">
                        <xsd:annotation>
                            <xsd:documentation>The last purge operation failed.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                </xsd:restriction>
            </xsd:simpleType>
            <xsd:complexType name="QualifiedProcessName">
                <xsd:annotation>
                    <xsd:documentation>Type to describe the fully qualified name of a process template.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="moduleName" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Name of the module to which the process template belongs.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="processName" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Name of the process template.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="version" nillable="true" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>OSGi-style version number of the process template. 

(This version number is the same as that of the module.)</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="QualifiedProcessNames">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of qualified process names.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="qualifiedProcessName" type="pm:QualifiedProcessName" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>Details of qualified process name.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="QualifiedTaskName">
                <xsd:annotation>
                    <xsd:documentation>Type to describe the fully qualified name of a task.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="moduleName" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Name of the module to which the process template belongs.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="processName" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Name of the process template to which the task belongs.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="version" nillable="true" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>OSGi-style version number of the process template. 
(This version number is the same as that of the module.)</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="taskName" nillable="true" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Name of the task.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="QueryApplicationsRequestType">
                <xsd:sequence>
                    <xsd:element name="applications" type="pm:Applications"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="QueryApplicationsResponseType">
                <xsd:sequence>
                    <xsd:element name="applications" type="pm:ApplicationTemplates" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="StarterOperation">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a starter operation. 

A starter operation is a way for an external (to Process Manager) application to create a process instance from a process template that has one and only one starter event, which must be a none starter event. </xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="processQName" type="pm:QualifiedProcessName">
                        <xsd:annotation>
                            <xsd:documentation>Fully qualified name of the process template from which the process instance is to be created.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="operation" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Name of the starter operation.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:simpleType name="StateModeType">
                <xsd:annotation>
                    <xsd:documentation>An enumerated indicating status mode for query on process instances</xsd:documentation>
                </xsd:annotation>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="TERMINATED">
                        <xsd:annotation>
                            <xsd:documentation>TERMINATED states</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="ACTIVE">
                        <xsd:annotation>
                            <xsd:documentation>ACTIVE states</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="ACTIVE_AND_TERMINATED">
                        <xsd:annotation>
                            <xsd:documentation>ACTIVE AND TERMINATED states</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                </xsd:restriction>
            </xsd:simpleType>
            <xsd:simpleType name="StatusCode">
                <xsd:annotation>
                    <xsd:documentation>An enumerated status indicator for an operation</xsd:documentation>
                </xsd:annotation>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="IN_PROGRESS">
                        <xsd:annotation>
                            <xsd:documentation>operation is currently being executed</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="COMPLETED">
                        <xsd:annotation>
                            <xsd:documentation>Toperation completed successfully</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="FAILED">
                        <xsd:annotation>
                            <xsd:documentation>failed status code</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                </xsd:restriction>
            </xsd:simpleType>
            <xsd:complexType name="TemplateAttribute">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a process template attribute.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexContent>
                    <xsd:extension base="pm:NameTypePair"/>
                </xsd:complexContent>
            </xsd:complexType>
            <xsd:complexType name="TemplateAttributes">
                <xsd:annotation>
                    <xsd:documentation>Type to describe a list of template attributes.</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="templateAttribute" type="pm:TemplateAttribute" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>Details of template attributes.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:simpleType name="TerminalStateType">
                <xsd:annotation>
                    <xsd:documentation>An enumerated status indicator for the last purge operation</xsd:documentation>
                </xsd:annotation>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="COMPLETED">
                        <xsd:annotation>
                            <xsd:documentation>COMPLETED state</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="CANCELLED">
                        <xsd:annotation>
                            <xsd:documentation>CANCELLED state</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="FAULTED">
                        <xsd:annotation>
                            <xsd:documentation>FAULTED state</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="FAILED">
                        <xsd:annotation>
                            <xsd:documentation>FAILED state</xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                </xsd:restriction>
            </xsd:simpleType>
            <xsd:complexType name="TerminalStates">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="state" type="pm:TerminalStateType"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="Void"/>
            <xsd:complexType name="bulkCancelOptions">
                <xsd:annotation>
                    <xsd:documentation>Provides options on specifying list of process instances</xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
                    <xsd:element name="processInstances" type="pm:ProcessInstancesType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) specified the process instances to be cancelled.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="databaseIds" type="pm:DatabaseIdType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>(Optional) specified the database id(internal pvm ids) to be cancelled.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="bulkCancelProcessInstancesRequestType">
                <xsd:sequence>
                    <xsd:element name="options" type="pm:bulkCancelOptions"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="cancelAdhocActivityRequestType">
                <xsd:sequence>
                    <xsd:element name="processID" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>process ID</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="activityName" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>activity name</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="checkPurgeTerminatedProcessInstancesResponseType">
                <xsd:sequence>
                    <xsd:element name="status" type="pm:PurgeStatus"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="listAdhocActivitiesRequestType">
                <xsd:sequence>
                    <xsd:element name="processID" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>process ID</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="globalDataRef" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>globalDataRef</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="listAdhocActivitiesResponseType">
                <xsd:sequence>
                    <xsd:element name="adhocActivities" type="pm:AdhocActivityTypes" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="purgeTerminatedProcessInstancesRequestType">
                <xsd:sequence>
                    <xsd:element name="options" type="pm:PurgeOptions"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="replaceUserRequestType">
                <xsd:sequence>
                    <xsd:element name="user" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>user name to replace with this request's Subject</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="processInstances" type="pm:ProcessInstancesType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>specifies which applications does the setting apply to</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="runAdhocActivityRequestType">
                <xsd:sequence>
                    <xsd:element name="processID" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>process ID</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="activityName" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>activity name</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="saveTerminatedProcessInstancesRequestType">
                <xsd:sequence>
                    <xsd:element name="willSave" type="xsd:boolean">
                        <xsd:annotation>
                            <xsd:documentation>true means to save and false means not to save terminated processes</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="saveDuration" type="xsd:duration" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>the duration for which the terminated process will be saved</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="processTemplates" type="pm:ProcessTemplatesType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>specifies which process templates does the setting apply to</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="applications" type="pm:Applications" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>specifies which applications does the setting apply to</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="activityInstanceStatus" type="pm:ActivityInstanceStatus">
                <xsd:annotation>
                    <xsd:documentation>Response element for getActivityInstanceStatus operation.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="availableProcessInstanceVariables">
                <xsd:annotation>
                    <xsd:documentation>Response element for getAvailableProcessInstanceVariables operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="variable" minOccurs="0" maxOccurs="unbounded">
                            <xsd:annotation>
                                <xsd:documentation>Variable definitions.</xsd:documentation>
                            </xsd:annotation>
                            <xsd:complexType>
                                <xsd:complexContent>
                                    <xsd:extension base="pm:NameValuePair">
                                        <xsd:sequence>
                                            <xsd:element name="Type" type="xsd:string">
                                                <xsd:annotation>
                                                    <xsd:documentation>Data type of the variable.</xsd:documentation>
                                                </xsd:annotation>
                                            </xsd:element>
                                        </xsd:sequence>
                                    </xsd:extension>
                                </xsd:complexContent>
                            </xsd:complexType>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="basicProcessTemplates">
                <xsd:annotation>
                    <xsd:documentation>Response element for listProcessTemplates operation, returning a list of process templates.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="basicProcessTemplate" type="pm:BasicProcessTemplate" minOccurs="0" maxOccurs="unbounded">
                            <xsd:annotation>
                                <xsd:documentation>Basic process template descriptions.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="bulkCancelProcessInstancesRequest" type="pm:bulkCancelProcessInstancesRequestType"/>
            <xsd:element name="bulkCancelProcessInstancesResponse" type="pm:GeneralStatusType"/>
            <xsd:element name="cancelAdhocActivityRequest" type="pm:cancelAdhocActivityRequestType"/>
            <xsd:element name="cancelAdhocActivityResponse" type="pm:GeneralStatusType"/>
            <xsd:element name="checkPurgeTerminatedProcessInstancesRequest" type="pm:Void"/>
            <xsd:element name="checkPurgeTerminatedProcessInstancesResponse" type="pm:PurgeStatus"/>
            <xsd:element name="createProcessInstanceInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for createProcessInstance operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="processQName" type="pm:QualifiedProcessName">
                            <xsd:annotation>
                                <xsd:documentation>Qualified name of the process template from which a process instance is to be created.

A starter operation is derived from a process template's none starter event. This element names the module to which the process template belongs.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="operationName" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Name of the starter operation used to create the process instance.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="options" type="pm:CreateProcessInstanceOptions">
                            <xsd:annotation>
                                <xsd:documentation>create options</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="parameterMap">
                            <xsd:annotation>
                                <xsd:documentation>Details of the parameters associated with this starter operation.</xsd:documentation>
                            </xsd:annotation>
                            <xsd:complexType>
                                <xsd:sequence>
                                    <xsd:element name="parameter" type="pm:NameValuePair" minOccurs="0" maxOccurs="unbounded">
                                        <xsd:annotation>
                                            <xsd:documentation>Details of parameters (as name/value pairs).</xsd:documentation>
                                        </xsd:annotation>
                                    </xsd:element>
                                </xsd:sequence>
                            </xsd:complexType>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="getActivityInstanceStatusInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for getActivityInstanceStatus operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="processID" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Unique ID of the process instance.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="activityName" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Name of the activity in this process instance.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="getAvailableProcessInstanceVariablesInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for getAvailableProcessInstanceVariables operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="processID" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Unique ID of the process instance.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="variableName" type="xsd:string" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>(Optional) Name of the variable for which a value should be returned.

If this parameter is omitted, data is returned for all variables available to the specified process.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="getParameterValueInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for getParameterValue operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="processID" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Unique ID of the process instance.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="parameterName" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Name of the parameter whose value is to be retrieved.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="getParameterValueOutput">
                <xsd:annotation>
                    <xsd:documentation>Response element for getParameterValue operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="parameterValue" type="xsd:anyType">
                            <xsd:annotation>
                                <xsd:documentation>Parameter value.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="getProcessInstanceStatusOutput" type="pm:ProcessInstance">
                <xsd:annotation>
                    <xsd:documentation>Response element for getProcessInstanceStatus operation, to summarize the current status of one process instance. 

Note that:

-  getProcessInstanceStatus is a convenience operation. It is possible to obtain the same data by calling queryProcessInstances with more complex inputs. 

- The ProcessInstance type is re-used. Some elements (namely, customAttributes) would never contain any data when returned in a getProcessInstanceStatus call.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="illegalArgumentFault" type="pm:BasicFaultType">
                <xsd:annotation>
                    <xsd:documentation>Fault element for illegal or missing input argument(s) exception.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="illegalStateFault" type="pm:BasicFaultType">
                <xsd:annotation>
                    <xsd:documentation>Fault element for illegal state exception.

This exception is returned when the requested operation cannot be performed because the target is not in the correct state.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="instanceAttributes">
                <xsd:annotation>
                    <xsd:documentation>Response element for the listProcessInstanceAttributes and listSetofProcessInstanceAttributes operations, returning a list of process instance attributes.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="instanceAttribute" type="pm:InstanceAttribute" minOccurs="0" maxOccurs="unbounded">
                            <xsd:annotation>
                                <xsd:documentation>Details of the process instance attributes associated with the process template(s) specified in the request.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="isSet" type="xsd:boolean">
                <xsd:annotation>
                    <xsd:documentation>Element (mostly response) for many operations that return a true/false indication.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="itemCount" type="xsd:int">
                <xsd:annotation>
                    <xsd:documentation>Element (mostly response) for many operations that return a count of certain items.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="listAdhocActivitiesRequest" type="pm:listAdhocActivitiesRequestType"/>
            <xsd:element name="listAdhocActivitiesResponse" type="pm:listAdhocActivitiesResponseType"/>
            <xsd:element name="listProcessInstanceAttributesInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for listProcessInstanceAttributes operation.

Attributes include process parameters, process data fields and pre-defined/system variables. 

These attributes can also be used in process instance queries - see queryProcessInstances.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="processQName" type="pm:QualifiedProcessName">
                            <xsd:annotation>
                                <xsd:documentation>Criteria identifying the process template(s) for which process instance attributes are to be listed.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="attributeType" type="pm:AttributeType">
                            <xsd:annotation>
                                <xsd:documentation>(Optional) Enumerated value which, if specified, filters the result set to include only those attributes which belong to the specified type (FILTERABLE, SORTABLE, DISPLAYABLE or HALT_ONLY).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="listProcessTemplateAttributesInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for listProcessTemplateAttributes operation.

Process template attributes, which are pre-defined variables and are the same for all process templates, can be used in process template queries - see the queryProcessTemplates operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="attributeType" type="pm:AttributeType">
                            <xsd:annotation>
                                <xsd:documentation>(Optional) Enumerated value which, if specified, filters the result set to include only those attributes which belong to the specified type (FILTERABLE, SORTABLE or DISPLAYABLE).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="listSetofProcessInstanceAttributesInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for listSetofProcessInstanceAttributes operation.

Attributes include process parameters, process data fields and pre-defined/system variables. 

These attributes can also be used in process instance queries - see queryProcessInstances.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="qualifiedProcessNames" type="pm:QualifiedProcessNames">
                            <xsd:annotation>
                                <xsd:documentation>List of qualified process names.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="attributeType" type="pm:AttributeType">
                            <xsd:annotation>
                                <xsd:documentation>(Optional) Enumerated value which, if specified, filters the result set to include only those attributes which belong to the specified type (FILTERABLE, SORTABLE, DISPLAYABLE or HALT_ONLY).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="migrationPoints" type="pm:MigrationPointTypes">
                <xsd:annotation>
                    <xsd:documentation>Response element for getMigrationPoints operation.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="migrationRuleList" type="pm:MigrationRuleTypesList">
                <xsd:annotation>
                    <xsd:documentation>Response element for listMigrationRules operation.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="migrationRules" type="pm:MigrationRuleTypes">
                <xsd:annotation>
                    <xsd:documentation>Request element for setMigrationRules and unsetMigrationRules operations.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="operationFailedFault" type="pm:BasicFaultType">
                <xsd:annotation>
                    <xsd:documentation>Fault element for various exceptions.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="operationInfo" type="pm:OperationInfo">
                <xsd:annotation>
                    <xsd:documentation>Response element for getStarterOperationInfo operation.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="page" type="pm:ExtendedPage">
                <xsd:annotation>
                    <xsd:documentation>Response element for queryFirstPage, queryPreviousPage, queryNextPage and queryLastPage operations.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="pagingID" type="xsd:int">
                <xsd:annotation>
                    <xsd:documentation>Request element for many operations supporting paging of query result sets. 

A pagingID identifies a particular set of data that can be paged (like a database cursor).</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processID" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>Unique ID assigned to a process instance.

This element is the request or response element for many operations.

</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processIdDBInfo" type="pm:ProcessIdDBInfo">
                <xsd:annotation>
                    <xsd:documentation>PVM database information corresponding to a process (PVM) ID.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processInstanceSummary">
                <xsd:annotation>
                    <xsd:documentation>Response element for getProcessInstanceSummary operation, to capture the summary information about a process instance. 

This operation is mainly used for debugging purposes.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="summary" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Summary of all information relevant to the process instance (as a formatted string), including a snapshot of all process variables' values.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="processInstances" type="pm:ProcessInstances">
                <xsd:annotation>
                    <xsd:documentation>Response element for listProcessInstances, queryProcessInstances and queryProcessInstancesAlt operations.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processTemplates" type="pm:ProcessTemplates">
                <xsd:annotation>
                    <xsd:documentation>Response element for queryProcessTemplates and queryProcessTemplatesAlt operations.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="purgeTerminatedProcessInstancesRequest" type="pm:purgeTerminatedProcessInstancesRequestType"/>
            <xsd:element name="purgeTerminatedProcessInstancesResponse" type="pm:PurgeStatus"/>
            <xsd:element name="qualifiedProcessName" type="pm:QualifiedProcessName">
                <xsd:annotation>
                    <xsd:documentation>Element (mostly request) for many operations that require the fully qualified name of a process template.

Wildcard characters can be used when specifying moduleName or processName, as follows:

- An asterisk '*' can be used to match zero or more characters. 
- A question mark '?' can be used to match any single character.

- A preceding backslash can be used to escape a wild-card character (i.e. to match a '*' or '?' character).
- Using double backslash escapes the escape character (i.e. to match the backslash character).

version must either specify an exact version, or can be left blank to return information about all versions.

The response message will then include data for all process templates whose fully qualified names match the defined input criteria.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="qualifiedProcessNames" type="pm:QualifiedProcessNames">
                <xsd:annotation>
                    <xsd:documentation>qualified process names</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="qualifiedTaskName" type="pm:QualifiedTaskName">
                <xsd:annotation>
                    <xsd:documentation>Request element for isSetMigrationRule operation.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="queryApplicationsRequest" type="pm:QueryApplicationsRequestType"/>
            <xsd:element name="queryApplicationsResponse" type="pm:QueryApplicationsResponseType"/>
            <xsd:element name="queryProcessInstancesAltInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for queryProcessInstancesAlt operation. 

This operation works the same way as queryProcessInstances, except the query string is broken into multiple parts. 

See also: listProcessInstanceAttributes operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="select" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Attributes to be selected for each process instance in the result set. The "FROM process" clause should be included.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="where" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Filter criteria to be used in the query.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="orderBy" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Sorting/grouping criteria to be used in the query.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="statusMode" type="pm:StateModeType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>status Mode - ACTIVE only, COMPLETED only, or ACTIVE and COMPLETED</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="pageSize" type="xsd:int">
                            <xsd:annotation>
                                <xsd:documentation>Page size to be used to return the list of process instances. One of the following values:

 0:  Return the entire result set in a single, non-paged list.

-1:  Return the result set in a paged list, using the default page size.

&gt;0: return the result set in a paged list, with the specified number of items on each page.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="attributeMap" type="pm:TemplateAttributes">
                            <xsd:annotation>
                                <xsd:documentation>(Optional) Specification of the types of user-defined attributes to be included in the query.

Specifying this parameter will make the query more efficient.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="queryProcessInstancesCountAltInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for queryProcessInstancesCountAlt operation. </xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="queryString" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Request element for queryProcessInstanceCount and queryProcessTemplateCount operations, which require a query string (in SQL syntax) as their input.

The query can be either a full SQL query string, or just the WHERE clause. If a full query string is used, the "FROM process" clause should be included.

(The underlying code knows whether to count process templates or process instances, depending on the calling operation.)</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="statusMode" type="pm:StateModeType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>status Mode - ACTIVE only, COMPLETED only, or ACTIVE and COMPLETED</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="queryProcessInstancesInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for queryProcessInstances, queryProcessInstancesAlt, queryHaltedProcessInstances operations. 

See also: listProcessInstanceAttributes operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="query" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Full (SQL syntax) query string. The "FROM process" clause should be included in the query.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="statusMode" type="pm:StateModeType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>status Mode - ACTIVE only, COMPLETED only, or ACTIVE and COMPLETED</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="pageSize" type="xsd:int">
                            <xsd:annotation>
                                <xsd:documentation>Page size to be used to return the list of process instances. One of the following values:

 0:  Return the entire result set in a single, non-paged list.

-1:  Return the result set in a paged list, using the default page size.

positive integer: return the result set in a paged list, with the specified number of items on each page.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="attributeMap" type="pm:TemplateAttributes">
                            <xsd:annotation>
                                <xsd:documentation>(Optional) Specification of the types of user-defined attributes to be included in the query.

Specifying this parameter will make the query more efficient.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="queryProcessInstancesOutput">
                <xsd:annotation>
                    <xsd:documentation>Response element for queryProcessInstances, queryProcessInstancesAlt, queryHaltedProcessInstances operations.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="processInstances" type="pm:ProcessInstances">
                            <xsd:annotation>
                                <xsd:documentation>Details of process instances that match the query specified in the request. 

This will be either the full list or the first page of the list, depending on the pageSize value specified in the request.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="totalCount" type="xsd:int" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>total number of items returned from the query.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="pageNumber" type="xsd:int" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>page number.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="isLastPage" type="xsd:boolean" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>is last page indicator.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="pagingID" type="xsd:int" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>Paging ID which can be used to get individual pages of the (paged) list.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="queryProcessTemplatesAltInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for queryProcessTemplatesAlt operation. Works the same way as queryProcessTemplates, except the query string is broken into multiple parts. See also listProcessTemplateAttributes.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="select" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Data fields to be selected for each process template in the result set. The "FROM process" clause should be included.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="where" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Filter criteria to be used in the query.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="orderBy" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Sorting/grouping criteria to be used in the query.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="pageSize" type="xsd:int">
                            <xsd:annotation>
                                <xsd:documentation>Page size to be used to return the list of process templates. One of the following values:

 0:  Return the entire result set in a single, non-paged list.

-1:  Return the result set in a paged list, using the default page size.

&gt;0: return the result set in a paged list, with the specified number of items on each page.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="queryProcessTemplatesInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for queryProcessTemplates operation. 

See also: listProcessTemplateAttributes operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="query" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Full (SQL syntax) query string. The "FROM process" clause should be included in the query.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="pageSize" type="xsd:int">
                            <xsd:annotation>
                                <xsd:documentation>Page size to be used to return the list of process templates. One of the following values:

 0:  Return the entire result set in a single, non-paged list.

-1:  Return the result set in a paged list, using the default page size.

&gt;0: return the result set in a paged list, with the specified number of items on each page.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="queryProcessTemplatesOutput">
                <xsd:annotation>
                    <xsd:documentation>Response element for queryProcessTemplates and queryProcessTemplatesAlt operations.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="processTemplates" type="pm:ProcessTemplates">
                            <xsd:annotation>
                                <xsd:documentation>Details of process templates that match the query specified in the request. 

This will be either the full list or the first page of the list, depending on the pageSize value specified in the request.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="pagingID" type="xsd:int" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>Paging ID which can be used to get individual pages of the (paged) list.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="queryString" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>Request element for queryProcessInstanceCount and queryProcessTemplateCount operations, which require a query string (in SQL syntax) as their input.

The query can be either a full SQL query string, or just the WHERE clause. If a full query string is used, the "FROM process" clause should be included.

(The underlying code knows whether to count process templates or process instances, depending on the calling operation.)</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="replaceUserRequest" type="pm:replaceUserRequestType"/>
            <xsd:element name="replaceUserResponse" type="pm:GeneralStatusType"/>
            <xsd:element name="runAdhocActivityRequest" type="pm:runAdhocActivityRequestType"/>
            <xsd:element name="runAdhocActivityResponse" type="pm:GeneralStatusType"/>
            <xsd:element name="saveTerminatedProcessInstancesRequest" type="pm:saveTerminatedProcessInstancesRequestType"/>
            <xsd:element name="saveTerminatedProcessInstancesResponse" type="pm:PurgeStatus"/>
            <xsd:element name="setAvailableProcessInstanceVariablesInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for setAvailableProcessInstanceVariables operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="processID" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Unique ID of the process instance for which variable values are to be set.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="variableMap">
                            <xsd:annotation>
                                <xsd:documentation>Details of the variable values to be set.</xsd:documentation>
                            </xsd:annotation>
                            <xsd:complexType>
                                <xsd:sequence>
                                    <xsd:element name="variable" type="pm:NameValuePair" maxOccurs="unbounded">
                                        <xsd:annotation>
                                            <xsd:documentation>Variable settings (as name/value pairs).</xsd:documentation>
                                        </xsd:annotation>
                                    </xsd:element>
                                </xsd:sequence>
                            </xsd:complexType>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="setDeadlineExpirationInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for setDeadlineExpiration operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="activityID" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Unique ID of the activity for which the deadline expiration is to be set.

(For example, the XPDL ID assigned by TIBCO Business Studio's Process Editor.)</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="expirationTime" type="xsd:dateTime">
                            <xsd:annotation>
                                <xsd:documentation>Expiration date/time for the specified activity.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="setPriorityInput">
                <xsd:annotation>
                    <xsd:documentation>Request element for setPriority operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="processID" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>Unique ID of the process instance for which the priority is to be set.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="priority" type="xsd:short">
                            <xsd:annotation>
                                <xsd:documentation>Priority value used to schedule the execution of this process instance.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="starterOperation" type="pm:StarterOperation">
                <xsd:annotation>
                    <xsd:documentation>Request element for any operation, such as getStarterOperationInfo, that needs starter operation information</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="starterOperations">
                <xsd:annotation>
                    <xsd:documentation>Response element for listStarterOperations operation.</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="starterOperation" type="pm:StarterOperation" minOccurs="0" maxOccurs="unbounded">
                            <xsd:annotation>
                                <xsd:documentation>Details of all defined starter operations.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="stopPurgeTerminatedProcessInstancesRequest" type="pm:Void"/>
            <xsd:element name="stopPurgeTerminatedProcessInstancesResponse" type="pm:PurgeStatus"/>
            <xsd:element name="success" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>Element (mostly response) for many operations that return a success indication.

This is a work-around so that WSDL 1.1 allows fault message(s) to be declared and thrown.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="templateAttributes" type="pm:TemplateAttributes">
                <xsd:annotation>
                    <xsd:documentation>Response element for listProcessTemplateAttributes operation, returning a list of process template attributes</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="test" type="xsd:string"/>
        </xsd:schema>
    </wsdl:types>
    <wsdl:message name="queryApplicationsRequest">
        <wsdl:part name="queryApplicationsRequestDoc" element="ns0:queryApplicationsRequest"/>
    </wsdl:message>
    <wsdl:message name="queryApplicationsResponse">
        <wsdl:part name="queryApplicationsResponseDoc" element="ns0:queryApplicationsResponse"/>
    </wsdl:message>
    <wsdl:message name="illegalArgumentFault">
        <wsdl:part name="fault" element="ns0:illegalArgumentFault"/>
    </wsdl:message>
    <wsdl:message name="illegalStateFault">
        <wsdl:part name="fault" element="ns0:illegalStateFault"/>
    </wsdl:message>
    <wsdl:message name="operationFailedFault">
        <wsdl:part name="fault" element="ns0:operationFailedFault"/>
    </wsdl:message>
    <wsdl:message name="retryProcessInstanceRequest">
        <wsdl:part name="params" element="ns0:processID"/>
    </wsdl:message>
    <wsdl:message name="successMessage">
        <wsdl:part name="params" element="ns0:success"/>
    </wsdl:message>
    <wsdl:message name="getActivityInstanceStatusRequest">
        <wsdl:part name="params" element="ns0:getActivityInstanceStatusInput"/>
    </wsdl:message>
    <wsdl:message name="getActivityInstanceStatusResponse">
        <wsdl:part name="params" element="ns0:activityInstanceStatus"/>
    </wsdl:message>
    <wsdl:message name="queryPreviousPageRequest">
        <wsdl:part name="params" element="ns0:pagingID"/>
    </wsdl:message>
    <wsdl:message name="queryPreviousPageResponse">
        <wsdl:part name="params" element="ns0:page"/>
    </wsdl:message>
    <wsdl:message name="queryNextPageRequest">
        <wsdl:part name="params" element="ns0:pagingID"/>
    </wsdl:message>
    <wsdl:message name="queryNextPageResponse">
        <wsdl:part name="params" element="ns0:page"/>
    </wsdl:message>
    <wsdl:message name="queryProcessInstancesAltRequest">
        <wsdl:part name="params" element="ns0:queryProcessInstancesAltInput"/>
    </wsdl:message>
    <wsdl:message name="queryProcessInstancesAltResponse">
        <wsdl:part name="params" element="ns0:queryProcessInstancesOutput"/>
    </wsdl:message>
    <wsdl:message name="setAvailableProcessInstanceVariablesRequest">
        <wsdl:part name="params" element="ns0:setAvailableProcessInstanceVariablesInput"/>
    </wsdl:message>
    <wsdl:message name="queryProcessInstancesRequest">
        <wsdl:part name="params" element="ns0:queryProcessInstancesInput"/>
    </wsdl:message>
    <wsdl:message name="queryProcessInstancesResponse">
        <wsdl:part name="params" element="ns0:queryProcessInstancesOutput"/>
    </wsdl:message>
    <wsdl:message name="resumeHaltedProcessInstanceRequest">
        <wsdl:part name="params" element="ns0:processID"/>
    </wsdl:message>
    <wsdl:message name="queryProcessTemplateCountRequest">
        <wsdl:part name="params" element="ns0:queryString"/>
    </wsdl:message>
    <wsdl:message name="queryProcessTemplateCountResponse">
        <wsdl:part name="params" element="ns0:itemCount"/>
    </wsdl:message>
    <wsdl:message name="listProcessTemplateAttributesRequest">
        <wsdl:part name="params" element="ns0:listProcessTemplateAttributesInput"/>
    </wsdl:message>
    <wsdl:message name="listProcessTemplateAttributesResponse">
        <wsdl:part name="params" element="ns0:templateAttributes"/>
    </wsdl:message>
    <wsdl:message name="getStarterOperationInfoRequest">
        <wsdl:part name="params" element="ns0:starterOperation"/>
    </wsdl:message>
    <wsdl:message name="getStarterOperationInfoResponse">
        <wsdl:part name="params" element="ns0:operationInfo"/>
    </wsdl:message>
    <wsdl:message name="getParameterValueRequest">
        <wsdl:part name="params" element="ns0:getParameterValueInput"/>
    </wsdl:message>
    <wsdl:message name="getParameterValueResponse">
        <wsdl:part name="params" element="ns0:getParameterValueOutput"/>
    </wsdl:message>
    <wsdl:message name="decodeProcessIdRequest">
        <wsdl:part name="params" element="ns0:processID"/>
    </wsdl:message>
    <wsdl:message name="decodeProcessIdResponse">
        <wsdl:part name="params" element="ns0:processIdDBInfo"/>
    </wsdl:message>
    <wsdl:message name="getProcessInstanceSummaryRequest">
        <wsdl:part name="params" element="ns0:processID"/>
    </wsdl:message>
    <wsdl:message name="getProcessInstanceSummaryResponse">
        <wsdl:part name="params" element="ns0:processInstanceSummary"/>
    </wsdl:message>
    <wsdl:message name="clearMigrationRulesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="resumeHaltedProcessInstancesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="resumeHaltedProcessInstancesResponse">
        <wsdl:part name="params" element="ns0:itemCount"/>
    </wsdl:message>
    <wsdl:message name="getMigrationPointsRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="getMigrationPointsResponse">
        <wsdl:part name="params" element="ns0:migrationPoints"/>
    </wsdl:message>
    <wsdl:message name="bulkCancelProcessInstancesRequest">
        <wsdl:part name="bulkCancelProcessInstancesRequestDoc" element="ns0:bulkCancelProcessInstancesRequest"/>
    </wsdl:message>
    <wsdl:message name="bulkCancelProcessInstancesResponse">
        <wsdl:part name="bulkCancelProcessInstancesResponseDoc" element="ns0:bulkCancelProcessInstancesResponse"/>
    </wsdl:message>
    <wsdl:message name="unsetMigrationRulesRequest">
        <wsdl:part name="params" element="ns0:migrationRules"/>
    </wsdl:message>
    <wsdl:message name="queryProcessTemplatesRequest">
        <wsdl:part name="params" element="ns0:queryProcessTemplatesInput"/>
    </wsdl:message>
    <wsdl:message name="queryProcessTemplatesResponse">
        <wsdl:part name="params" element="ns0:queryProcessTemplatesOutput"/>
    </wsdl:message>
    <wsdl:message name="listSetofProcessInstanceAttributesRequest">
        <wsdl:part name="params" element="ns0:listSetofProcessInstanceAttributesInput"/>
    </wsdl:message>
    <wsdl:message name="listProcessInstanceAttributesResponse">
        <wsdl:part name="params" element="ns0:instanceAttributes"/>
    </wsdl:message>
    <wsdl:message name="resumeProcessInstancesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="resumeProcessInstancesResponse">
        <wsdl:part name="params" element="ns0:itemCount"/>
    </wsdl:message>
    <wsdl:message name="isSetMigrationRuleRequest">
        <wsdl:part name="params" element="ns0:qualifiedTaskName"/>
    </wsdl:message>
    <wsdl:message name="isSetMessage">
        <wsdl:part name="params" element="ns0:isSet"/>
    </wsdl:message>
    <wsdl:message name="queryLastPageRequest">
        <wsdl:part name="params" element="ns0:pagingID"/>
    </wsdl:message>
    <wsdl:message name="queryLastPageResponse">
        <wsdl:part name="params" element="ns0:page"/>
    </wsdl:message>
    <wsdl:message name="createProcessInstanceRequest">
        <wsdl:part name="params" element="ns0:createProcessInstanceInput"/>
    </wsdl:message>
    <wsdl:message name="createProcessInstanceResponse">
        <wsdl:part name="params" element="ns0:processID"/>
    </wsdl:message>
    <wsdl:message name="setPriorityRequest">
        <wsdl:part name="params" element="ns0:setPriorityInput"/>
    </wsdl:message>
    <wsdl:message name="resumeProcessInstanceRequest">
        <wsdl:part name="params" element="ns0:processID"/>
    </wsdl:message>
    <wsdl:message name="getAvailableProcessInstanceVariablesRequest">
        <wsdl:part name="params" element="ns0:getAvailableProcessInstanceVariablesInput"/>
    </wsdl:message>
    <wsdl:message name="getAvailableProcessInstanceVariablesResponse">
        <wsdl:part name="params" element="ns0:availableProcessInstanceVariables"/>
    </wsdl:message>
    <wsdl:message name="ignoreProcessInstancesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="ignoreProcessInstancesResponse">
        <wsdl:part name="params" element="ns0:itemCount"/>
    </wsdl:message>
    <wsdl:message name="stopPurgeTerminatedProcessInstancesRequest">
        <wsdl:part name="stopPurgeTerminatedProcessInstancesRequestDoc" element="ns0:stopPurgeTerminatedProcessInstancesRequest"/>
    </wsdl:message>
    <wsdl:message name="stopPurgeTerminatedProcessInstancesResponse">
        <wsdl:part name="stopPurgeTerminatedProcessInstancesResponseDoc" element="ns0:stopPurgeTerminatedProcessInstancesResponse"/>
    </wsdl:message>
    <wsdl:message name="purgeTerminatedProcessInstancesRequest">
        <wsdl:part name="purgeTerminatedProcessInstancesRequestDoc" element="ns0:purgeTerminatedProcessInstancesRequest"/>
    </wsdl:message>
    <wsdl:message name="purgeTerminatedProcessInstancesResponse">
        <wsdl:part name="purgeTerminatedProcessInstancesResponseDoc" element="ns0:purgeTerminatedProcessInstancesResponse"/>
    </wsdl:message>
    <wsdl:message name="suspendProcessInstancesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="suspendProcessInstancesResponse">
        <wsdl:part name="params" element="ns0:itemCount"/>
    </wsdl:message>
    <wsdl:message name="checkPurgeTerminatedProcessInstancesRequest">
        <wsdl:part name="checkPurgeTerminatedProcessInstancesRequestDoc" element="ns0:checkPurgeTerminatedProcessInstancesRequest"/>
    </wsdl:message>
    <wsdl:message name="checkPurgeTerminatedProcessInstancesResponse">
        <wsdl:part name="checkPurgeTerminatedProcessInstancesResponseDoc" element="ns0:checkPurgeTerminatedProcessInstancesResponse"/>
    </wsdl:message>
    <wsdl:message name="cancelAdhocActivityRequest">
        <wsdl:part name="cancelAdhocActivityRequestDoc" element="ns0:cancelAdhocActivityRequest"/>
    </wsdl:message>
    <wsdl:message name="cancelAdhocActivityResponse">
        <wsdl:part name="cancelAdhocActivityResponseDoc" element="ns0:cancelAdhocActivityResponse"/>
    </wsdl:message>
    <wsdl:message name="cancelProcessInstanceRequest">
        <wsdl:part name="params" element="ns0:processID"/>
    </wsdl:message>
    <wsdl:message name="getProcessInstanceStatusRequest">
        <wsdl:part name="params" element="ns0:processID"/>
    </wsdl:message>
    <wsdl:message name="getProcessInstanceStatusResponse">
        <wsdl:part name="params" element="ns0:getProcessInstanceStatusOutput"/>
    </wsdl:message>
    <wsdl:message name="runAdhocActivityRequest">
        <wsdl:part name="runAdhocActivityRequestDoc" element="ns0:runAdhocActivityRequest"/>
    </wsdl:message>
    <wsdl:message name="runAdhocActivityResponse">
        <wsdl:part name="runAdhocActivityResponseDoc" element="ns0:runAdhocActivityResponse"/>
    </wsdl:message>
    <wsdl:message name="queryDoneRequest">
        <wsdl:part name="params" element="ns0:pagingID"/>
    </wsdl:message>
    <wsdl:message name="queryProcessTemplatesAltRequest">
        <wsdl:part name="params" element="ns0:queryProcessTemplatesAltInput"/>
    </wsdl:message>
    <wsdl:message name="queryProcessTemplatesAltResponse">
        <wsdl:part name="params" element="ns0:queryProcessTemplatesOutput"/>
    </wsdl:message>
    <wsdl:message name="purgeProcessInstancesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="purgeProcessInstancesResponse">
        <wsdl:part name="params" element="ns0:itemCount"/>
    </wsdl:message>
    <wsdl:message name="queryFirstPageRequest">
        <wsdl:part name="params" element="ns0:pagingID"/>
    </wsdl:message>
    <wsdl:message name="queryFirstPageResponse">
        <wsdl:part name="params" element="ns0:page"/>
    </wsdl:message>
    <wsdl:message name="setMigrationRulesRequest">
        <wsdl:part name="params" element="ns0:migrationRules"/>
    </wsdl:message>
    <wsdl:message name="listAdhocActivitiesRequest">
        <wsdl:part name="listAdhocActivitiesRequestDoc" element="ns0:listAdhocActivitiesRequest"/>
    </wsdl:message>
    <wsdl:message name="listAdhocActivitiesResponse">
        <wsdl:part name="listAdhocActivitiesResponseDoc" element="ns0:listAdhocActivitiesResponse"/>
    </wsdl:message>
    <wsdl:message name="listProcessInstanceAttributesRequest">
        <wsdl:part name="params" element="ns0:listProcessInstanceAttributesInput"/>
    </wsdl:message>
    <wsdl:message name="setDeadlineExpirationRequest">
        <wsdl:part name="params" element="ns0:setDeadlineExpirationInput"/>
    </wsdl:message>
    <wsdl:message name="listProcessInstancesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="listProcessInstancesResponse">
        <wsdl:part name="params" element="ns0:processInstances"/>
    </wsdl:message>
    <wsdl:message name="listStarterOperationsRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="listStarterOperationsResponse">
        <wsdl:part name="params" element="ns0:starterOperations"/>
    </wsdl:message>
    <wsdl:message name="cancelProcessInstancesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="cancelProcessInstancesResponse">
        <wsdl:part name="params" element="ns0:itemCount"/>
    </wsdl:message>
    <wsdl:message name="retryProcessInstancesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="retryProcessInstancesResponse">
        <wsdl:part name="params" element="ns0:itemCount"/>
    </wsdl:message>
    <wsdl:message name="queryProcessInstanceCountRequest">
        <wsdl:part name="params" element="ns0:queryString"/>
    </wsdl:message>
    <wsdl:message name="queryProcessInstanceCountResponse">
        <wsdl:part name="params" element="ns0:itemCount"/>
    </wsdl:message>
    <wsdl:message name="listProcessTemplatesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="listProcessTemplatesResponse">
        <wsdl:part name="params" element="ns0:basicProcessTemplates"/>
    </wsdl:message>
    <wsdl:message name="listMigrationRulesRequest">
        <wsdl:part name="params" element="ns0:qualifiedProcessName"/>
    </wsdl:message>
    <wsdl:message name="listMigrationRulesResponse">
        <wsdl:part name="params" element="ns0:migrationRuleList"/>
    </wsdl:message>
    <wsdl:message name="saveTerminatedProcessInstancesRequest">
        <wsdl:part name="saveTerminatedProcessInstancesRequestDoc" element="ns0:saveTerminatedProcessInstancesRequest"/>
    </wsdl:message>
    <wsdl:message name="saveTerminatedProcessInstancesResponse">
        <wsdl:part name="saveTerminatedProcessInstancesResponseDoc" element="ns0:saveTerminatedProcessInstancesResponse"/>
    </wsdl:message>
    <wsdl:message name="suspendProcessInstanceRequest">
        <wsdl:part name="params" element="ns0:processID"/>
    </wsdl:message>
    <wsdl:message name="queryProcessInstanceCountAltRequest">
        <wsdl:part name="params" element="ns0:queryProcessInstancesCountAltInput"/>
    </wsdl:message>
    <wsdl:message name="ignoreProcessInstanceRequest">
        <wsdl:part name="params" element="ns0:processID"/>
    </wsdl:message>
    <wsdl:message name="replaceUserRequest">
        <wsdl:part name="replaceUserRequestDoc" element="ns0:replaceUserRequest"/>
    </wsdl:message>
    <wsdl:message name="replaceUserResponse">
        <wsdl:part name="replaceUserResponseDoc" element="ns0:replaceUserResponse"/>
    </wsdl:message>
    <wsdl:portType name="processManagement">
        <wsdl:operation name="queryApplications">
            <wsdl:input message="tns:queryApplicationsRequest"/>
            <wsdl:output message="tns:queryApplicationsResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="retryProcessInstance">
            <wsdl:input message="tns:retryProcessInstanceRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="getActivityInstanceStatus">
            <wsdl:input message="tns:getActivityInstanceStatusRequest"/>
            <wsdl:output message="tns:getActivityInstanceStatusResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryPreviousPage">
            <wsdl:input message="tns:queryPreviousPageRequest"/>
            <wsdl:output message="tns:queryPreviousPageResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryNextPage">
            <wsdl:input message="tns:queryNextPageRequest"/>
            <wsdl:output message="tns:queryNextPageResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryProcessInstancesAlt">
            <wsdl:input message="tns:queryProcessInstancesAltRequest"/>
            <wsdl:output message="tns:queryProcessInstancesAltResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="setAvailableProcessInstanceVariables">
            <wsdl:input message="tns:setAvailableProcessInstanceVariablesRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryProcessInstances">
            <wsdl:input message="tns:queryProcessInstancesRequest"/>
            <wsdl:output message="tns:queryProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="resumeHaltedProcessInstance">
            <wsdl:input message="tns:resumeHaltedProcessInstanceRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryProcessTemplateCount">
            <wsdl:input message="tns:queryProcessTemplateCountRequest"/>
            <wsdl:output message="tns:queryProcessTemplateCountResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="listProcessTemplateAttributes">
            <wsdl:input message="tns:listProcessTemplateAttributesRequest"/>
            <wsdl:output message="tns:listProcessTemplateAttributesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="getStarterOperationInfo">
            <wsdl:input message="tns:getStarterOperationInfoRequest"/>
            <wsdl:output message="tns:getStarterOperationInfoResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="getParameterValue">
            <wsdl:input message="tns:getParameterValueRequest"/>
            <wsdl:output message="tns:getParameterValueResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
        </wsdl:operation>
        <wsdl:operation name="decodeProcessId">
            <wsdl:input message="tns:decodeProcessIdRequest"/>
            <wsdl:output message="tns:decodeProcessIdResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="getProcessInstanceSummary">
            <wsdl:input message="tns:getProcessInstanceSummaryRequest"/>
            <wsdl:output message="tns:getProcessInstanceSummaryResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="clearMigrationRules">
            <wsdl:input message="tns:clearMigrationRulesRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="resumeHaltedProcessInstances">
            <wsdl:input message="tns:resumeHaltedProcessInstancesRequest"/>
            <wsdl:output message="tns:resumeHaltedProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="getMigrationPoints">
            <wsdl:input message="tns:getMigrationPointsRequest"/>
            <wsdl:output message="tns:getMigrationPointsResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="bulkCancelProcessInstances">
            <wsdl:input message="tns:bulkCancelProcessInstancesRequest"/>
            <wsdl:output message="tns:bulkCancelProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="unsetMigrationRules">
            <wsdl:input message="tns:unsetMigrationRulesRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryHaltedProcessInstances">
            <wsdl:input message="tns:queryProcessInstancesRequest"/>
            <wsdl:output message="tns:queryProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryProcessTemplates">
            <wsdl:input message="tns:queryProcessTemplatesRequest"/>
            <wsdl:output message="tns:queryProcessTemplatesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="listSetofProcessInstanceAttributes">
            <wsdl:input message="tns:listSetofProcessInstanceAttributesRequest"/>
            <wsdl:output message="tns:listProcessInstanceAttributesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="resumeProcessInstances">
            <wsdl:input message="tns:resumeProcessInstancesRequest"/>
            <wsdl:output message="tns:resumeProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="isSetMigrationRule">
            <wsdl:input message="tns:isSetMigrationRuleRequest"/>
            <wsdl:output message="tns:isSetMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryLastPage">
            <wsdl:input message="tns:queryLastPageRequest"/>
            <wsdl:output message="tns:queryLastPageResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="createProcessInstance">
            <wsdl:input message="tns:createProcessInstanceRequest"/>
            <wsdl:output message="tns:createProcessInstanceResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="setPriority">
            <wsdl:input message="tns:setPriorityRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="resumeProcessInstance">
            <wsdl:input message="tns:resumeProcessInstanceRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="getAvailableProcessInstanceVariables">
            <wsdl:input message="tns:getAvailableProcessInstanceVariablesRequest"/>
            <wsdl:output message="tns:getAvailableProcessInstanceVariablesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="ignoreProcessInstances">
            <wsdl:input message="tns:ignoreProcessInstancesRequest"/>
            <wsdl:output message="tns:ignoreProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="stopPurgeTerminatedProcessInstances">
            <wsdl:input message="tns:stopPurgeTerminatedProcessInstancesRequest"/>
            <wsdl:output message="tns:stopPurgeTerminatedProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="purgeTerminatedProcessInstances">
            <wsdl:input message="tns:purgeTerminatedProcessInstancesRequest"/>
            <wsdl:output message="tns:purgeTerminatedProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="suspendProcessInstances">
            <wsdl:input message="tns:suspendProcessInstancesRequest"/>
            <wsdl:output message="tns:suspendProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="checkPurgeTerminatedProcessInstances">
            <wsdl:input message="tns:checkPurgeTerminatedProcessInstancesRequest"/>
            <wsdl:output message="tns:checkPurgeTerminatedProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="cancelAdhocActivity">
            <wsdl:input message="tns:cancelAdhocActivityRequest"/>
            <wsdl:output message="tns:cancelAdhocActivityResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="cancelProcessInstance">
            <wsdl:input message="tns:cancelProcessInstanceRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="getProcessInstanceStatus">
            <wsdl:input message="tns:getProcessInstanceStatusRequest"/>
            <wsdl:output message="tns:getProcessInstanceStatusResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="runAdhocActivity">
            <wsdl:input message="tns:runAdhocActivityRequest"/>
            <wsdl:output message="tns:runAdhocActivityResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryDone">
            <wsdl:input message="tns:queryDoneRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryProcessTemplatesAlt">
            <wsdl:input message="tns:queryProcessTemplatesAltRequest"/>
            <wsdl:output message="tns:queryProcessTemplatesAltResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="purgeProcessInstances">
            <wsdl:input message="tns:purgeProcessInstancesRequest"/>
            <wsdl:output message="tns:purgeProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryFirstPage">
            <wsdl:input message="tns:queryFirstPageRequest"/>
            <wsdl:output message="tns:queryFirstPageResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="setMigrationRules">
            <wsdl:input message="tns:setMigrationRulesRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="listAdhocActivities">
            <wsdl:input message="tns:listAdhocActivitiesRequest"/>
            <wsdl:output message="tns:listAdhocActivitiesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="listProcessInstanceAttributes">
            <wsdl:input message="tns:listProcessInstanceAttributesRequest"/>
            <wsdl:output message="tns:listProcessInstanceAttributesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="setDeadlineExpiration">
            <wsdl:input message="tns:setDeadlineExpirationRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="listProcessInstances">
            <wsdl:input message="tns:listProcessInstancesRequest"/>
            <wsdl:output message="tns:listProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="dispatchSignal">
            <wsdl:input message="tns:createProcessInstanceRequest"/>
            <wsdl:output message="tns:successMessage"/>
        </wsdl:operation>
        <wsdl:operation name="listStarterOperations">
            <wsdl:input message="tns:listStarterOperationsRequest"/>
            <wsdl:output message="tns:listStarterOperationsResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="cancelProcessInstances">
            <wsdl:input message="tns:cancelProcessInstancesRequest"/>
            <wsdl:output message="tns:cancelProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="retryProcessInstances">
            <wsdl:input message="tns:retryProcessInstancesRequest"/>
            <wsdl:output message="tns:retryProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryProcessInstanceCount">
            <wsdl:input message="tns:queryProcessInstanceCountRequest"/>
            <wsdl:output message="tns:queryProcessInstanceCountResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="listProcessTemplates">
            <wsdl:input message="tns:listProcessTemplatesRequest"/>
            <wsdl:output message="tns:listProcessTemplatesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="listMigrationRules">
            <wsdl:input message="tns:listMigrationRulesRequest"/>
            <wsdl:output message="tns:listMigrationRulesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="saveTerminatedProcessInstances">
            <wsdl:input message="tns:saveTerminatedProcessInstancesRequest"/>
            <wsdl:output message="tns:saveTerminatedProcessInstancesResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="suspendProcessInstance">
            <wsdl:input message="tns:suspendProcessInstanceRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="queryProcessInstanceCountAlt">
            <wsdl:input message="tns:queryProcessInstanceCountAltRequest"/>
            <wsdl:output message="tns:queryProcessInstanceCountResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="ignoreProcessInstance">
            <wsdl:input message="tns:ignoreProcessInstanceRequest"/>
            <wsdl:output message="tns:successMessage"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
        <wsdl:operation name="replaceUser">
            <wsdl:input message="tns:replaceUserRequest"/>
            <wsdl:output message="tns:replaceUserResponse"/>
            <wsdl:fault name="illegalArgumentFault" message="tns:illegalArgumentFault"/>
            <wsdl:fault name="illegalStateFault" message="tns:illegalStateFault"/>
            <wsdl:fault name="operationFailedFault" message="tns:operationFailedFault"/>
        </wsdl:operation>
    </wsdl:portType>
    <wsdl:binding name="N2PEProcessManagementService.soap" type="tns:processManagement">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <wsdl:operation name="queryApplications">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryApplications"/>
            <wsdl:input>
                <soap:body use="literal" parts="queryApplicationsRequestDoc"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="queryApplicationsResponseDoc"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="retryProcessInstance">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="retryProcessInstance"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getActivityInstanceStatus">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="getActivityInstanceStatus"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryPreviousPage">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryPreviousPage"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryNextPage">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryNextPage"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryProcessInstancesAlt">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryProcessInstancesAlt"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="setAvailableProcessInstanceVariables">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="setAvailableProcessInstanceVariables"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="resumeHaltedProcessInstance">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="resumeHaltedProcessInstance"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryProcessTemplateCount">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryProcessTemplateCount"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="listProcessTemplateAttributes">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="listProcessTemplateAttributes"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getStarterOperationInfo">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="getStarterOperationInfo"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getParameterValue">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="getParameterValue"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="decodeProcessId">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="decodeProcessId"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getProcessInstanceSummary">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="getProcessInstanceSummary"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="clearMigrationRules">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="clearMigrationRules"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="resumeHaltedProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="resumeHaltedProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getMigrationPoints">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="getMigrationPoints"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="bulkCancelProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="bulkCancelProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="bulkCancelProcessInstancesRequestDoc"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="bulkCancelProcessInstancesResponseDoc"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="unsetMigrationRules">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="unsetMigrationRules"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryHaltedProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryHaltedProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryProcessTemplates">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryProcessTemplates"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="listSetofProcessInstanceAttributes">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="listSetofProcessInstanceAttributes"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="resumeProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="resumeProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="isSetMigrationRule">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="isSetMigrationRule"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryLastPage">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryLastPage"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="createProcessInstance">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="createProcessInstance"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="setPriority">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="setPriority"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="resumeProcessInstance">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="resumeProcessInstance"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getAvailableProcessInstanceVariables">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="getAvailableProcessInstanceVariables"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="ignoreProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="ignoreProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="stopPurgeTerminatedProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="stopPurgeTerminatedProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="stopPurgeTerminatedProcessInstancesRequestDoc"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="stopPurgeTerminatedProcessInstancesResponseDoc"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="purgeTerminatedProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="purgeTerminatedProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="purgeTerminatedProcessInstancesRequestDoc"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="purgeTerminatedProcessInstancesResponseDoc"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="suspendProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="suspendProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="checkPurgeTerminatedProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="checkPurgeTerminatedProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="checkPurgeTerminatedProcessInstancesRequestDoc"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="checkPurgeTerminatedProcessInstancesResponseDoc"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="cancelAdhocActivity">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="cancelAdhocActivity"/>
            <wsdl:input>
                <soap:body use="literal" parts="cancelAdhocActivityRequestDoc"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="cancelAdhocActivityResponseDoc"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="cancelProcessInstance">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="cancelProcessInstance"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getProcessInstanceStatus">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="getProcessInstanceStatus"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="runAdhocActivity">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="runAdhocActivity"/>
            <wsdl:input>
                <soap:body use="literal" parts="runAdhocActivityRequestDoc"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="runAdhocActivityResponseDoc"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryDone">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryDone"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryProcessTemplatesAlt">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryProcessTemplatesAlt"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="purgeProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="purgeProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryFirstPage">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryFirstPage"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="setMigrationRules">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="setMigrationRules"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="listAdhocActivities">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="listAdhocActivities"/>
            <wsdl:input>
                <soap:body use="literal" parts="listAdhocActivitiesRequestDoc"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="listAdhocActivitiesResponseDoc"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="listProcessInstanceAttributes">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="listProcessInstanceAttributes"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="setDeadlineExpiration">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="setDeadlineExpiration"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="listProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="listProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="dispatchSignal">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="dispatchSignal"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="listStarterOperations">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="listStarterOperations"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="cancelProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="cancelProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="retryProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="retryProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryProcessInstanceCount">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryProcessInstanceCount"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="listProcessTemplates">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="listProcessTemplates"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="listMigrationRules">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="listMigrationRules"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="saveTerminatedProcessInstances">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="saveTerminatedProcessInstances"/>
            <wsdl:input>
                <soap:body use="literal" parts="saveTerminatedProcessInstancesRequestDoc"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="saveTerminatedProcessInstancesResponseDoc"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="suspendProcessInstance">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="suspendProcessInstance"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="queryProcessInstanceCountAlt">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="queryProcessInstanceCountAlt"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="ignoreProcessInstance">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="ignoreProcessInstance"/>
            <wsdl:input>
                <soap:body use="literal" parts="params"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="params"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="replaceUser">
            <wsdl:documentation/>
            <soap:operation style="document" soapAction="replaceUser"/>
            <wsdl:input>
                <soap:body use="literal" parts="replaceUserRequestDoc"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" parts="replaceUserResponseDoc"/>
            </wsdl:output>
            <wsdl:fault name="illegalArgumentFault">
                <soap:fault use="literal" name="illegalArgumentFault"/>
            </wsdl:fault>
            <wsdl:fault name="illegalStateFault">
                <soap:fault use="literal" name="illegalStateFault"/>
            </wsdl:fault>
            <wsdl:fault name="operationFailedFault">
                <soap:fault use="literal" name="operationFailedFault"/>
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:binding>
    <wsdl:service name="BxProcessManagementService_1.10.0">
        <wsdl:port name="N2PEProcessManagementService.soap" binding="tns:N2PEProcessManagementService.soap">
            <soap:address location="http://0.0.0.0:8088/bxEngine/node/processManagement/"/>
        </wsdl:port>
    </wsdl:service>
</wsdl:definitions>